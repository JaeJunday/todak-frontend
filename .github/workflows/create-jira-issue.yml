name: Sync Jira with GitHub Issue
on:
  issues:
    types:
      - opened
      - edited
      - closed

jobs:
  sync-jira-issue:
    name: Sync Jira with GitHub Issue
    runs-on: ubuntu-latest
    steps:
      - name: Login to Jira
        uses: atlassian/gajira-login@v3
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}

      - name: Checkout main code
        if: github.event.action == 'opened' || github.event.action == 'edited'
        uses: actions/checkout@v4
        with:
          ref: main

      # 다른 레포에서 파일 가져오기
      - name: Fetch issue template from other repo
        if: github.event.action == 'opened' || github.event.action == 'edited'
        run: |
          curl -H "Accept: application/vnd.github.v3.raw" \
            -o ./feature.yml \
            https://api.github.com/repos/kakaotech-19/.github/contents/.github/ISSUE_TEMPLATE/feature.yml
      # 가져온 파일을 Issue Parser에 사용
      - name: Issue Parser
        if: github.event.action == 'opened' || github.event.action == 'edited'
        uses: stefanbuck/github-issue-parser@v3
        id: issue-parser
        with:
          template-path: ./feature.yml

      - name: Log Issue Parser
        if: github.event.action == 'opened' || github.event.action == 'edited'
        run: |
          echo '${{ steps.issue-parser.outputs.jsonString }}'

      - name: Convert markdown to Jira Syntax
        if: github.event.action == 'opened' || github.event.action == 'edited'
        uses: peter-evans/jira2md@v1
        id: md2jira
        with:
          input-text: |
            ### Github Issue Link
            - ${{ github.event.issue.html_url }}
            ${{ github.event.issue.body }}
          mode: md2jira

      # 이슈 생성 또는 업데이트 로직
      - name: Create Jira Sub-task Issue
        if: github.event.action == 'opened'
        id: create-jira-issue
        uses: atlassian/gajira-create@v3
        with:
          project: TODAK
          issuetype: Sub-task
          summary: "${{ github.event.issue.title }}"
          description: "${{ steps.md2jira.outputs.output-text }}"
          fields: |
            {
              "parent": {
                "key": "${{ steps.issue-parser.outputs.issueparser_parentKey }}"
              }
            }


      - name: Log created Jira issue
        if: github.event.action == 'opened'
        run: echo "Created Jira Issue Key:${{ steps.create-jira-issue.outputs.issue }}"

      # GitHub 이슈 본문에 Jira 이슈 키 저장
      - name: Update GitHub issue with Jira key
        if: github.event.action == 'opened'
        uses: actions-cool/issues-helper@v3
        with:
          actions: "update-issue"
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.issue.number }}
          body: |
            ${{ github.event.issue.body }}

            **Jira Issue Key**: ${{ steps.create-jira-issue.outputs.issue }}

      # 이슈 업데이트 시, 본문에서 Jira 이슈 키를 파싱
      - name: Extract Jira Issue Key from GitHub issue body
        if: github.event.action == 'edited' || github.event.action == 'closed'
        run: |
          echo "${{ github.event.issue.body }}" | grep -oE '\*\*Jira Issue Key\*\*: \S+' | sed 's/\*\*Jira Issue Key\*\*: //' > jira_key.txt
        id: extract-jira-key


      - name: Log extracted Jira Issue Key
        if: github.event.action == 'edited' || github.event.action == 'closed'
        run: |
          echo "Jira Issue Key: $(cat jira_key.txt)"

      # Jira 이슈 업데이트 로직
      - name: Update Jira Issue
        if: github.event.action == 'edited'
        uses: atlassian/gajira-create@v3
        with:
          project: TODAK
          issuetype: Sub-task
          summary: "${{ github.event.issue.title }}"
          description: "${{ steps.md2jira.outputs.output-text }}"
          update: true  # 이슈가 있으면 업데이트하도록 설정
          issue: "$(cat jira_key.txt)"  # GitHub 이슈에서 파싱한 Jira 이슈 키로 업데이트
          fields: |
            {
              "parent": {
                "key": "${{ steps.issue-parser.outputs.issueparser_parentKey }}"
              }
            }

      # Jira 이슈가 닫힐 때 처리
      - name: Close Jira Issue
        if: github.event.action == 'closed'
        id: close
        uses: atlassian/gajira-transition@v3
        with:
          issue: "$(cat jira_key.txt)"
          transition: Done  # 자식 이슈를 Done 상태로 변경

      # GitHub 이슈가 열릴 때만 브랜치 생성 로직 실행
      - name: Checkout develop code
        if: github.event.action == 'opened'
        uses: actions/checkout@v4
        with:
          ref: develop

      - name: Create branch with Ticket number
        if: github.event.action == 'opened'
        run: |
          git checkout -b ${{ steps.create-jira-issue.outputs.issue }}
          git push origin ${{ steps.create-jira-issue.outputs.issue }}

      # 이슈 제목 업데이트
      - name: Update issue title
        if: github.event.action == 'opened'
        uses: actions-cool/issues-helper@v3
        with:
          actions: "update-issue"
          token: ${{ secrets.GITHUB_TOKEN }}
          title: "${{ steps.create-jira-issue.outputs.issue }} ${{ github.event.issue.title }}"
